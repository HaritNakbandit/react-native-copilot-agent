name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop, release/* ]
  pull_request_target:
    types: [opened, synchroniz      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-ened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install dependencies
        run: |
          npm ci
          # Install Ruby dependencies for iOS (if needed)
          bundle install --jobs 4 --retry 3

      - name: TypeScript Check
        run: npx tsc --noEmit

      - name: ESLint Check
        run: npm run lint

      - name: Prettier Check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}" "**/*.{json,md}"

      - name: Run Tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment Test Coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  android-build:
    name: Android Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make Gradlew executable
        run: chmod +x android/gradlew

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleDebug --no-daemon --stacktrace

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 1

  ios-build:
    name: iOS Build Verification
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install dependencies
        run: npm ci

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install

      - name: Build iOS App
        run: |
          cd ios
          xcodebuild \
            -workspace InvestmentFundApp.xcworkspace \
            -scheme InvestmentFundApp \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
            build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          # Generate audit report
          npm audit --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 7

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Check PR size
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const changedFiles = pr.changed_files;
            
            let size = 'small';
            let emoji = 'üü¢';
            
            if (additions + deletions > 1000 || changedFiles > 20) {
              size = 'large';
              emoji = 'üî¥';
            } else if (additions + deletions > 500 || changedFiles > 10) {
              size = 'medium';
              emoji = 'üü°';
            }
            
            const comment = `${emoji} **PR Size: ${size}**
            
            üìä **Stats:**
            - **Lines changed:** +${additions} -${deletions}
            - **Files changed:** ${changedFiles}
            
            ${size === 'large' ? '‚ö†Ô∏è This is a large PR. Consider breaking it into smaller chunks for easier review.' : ''}
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Size:')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [code-quality, android-build, ios-build, security-scan]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Android Build: ${{ needs.android-build.result }}"
          echo "iOS Build: ${{ needs.ios-build.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "failure" || "${{ needs.android-build.result }}" == "failure" || "${{ needs.ios-build.result }}" == "failure" ]]; then
            echo "‚ùå PR validation failed"
            exit 1
          else
            echo "‚úÖ PR validation passed"
          fi
