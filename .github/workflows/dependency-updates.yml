name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  dependency-review:
    name: Review Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for outdated packages
        run: |
          npm outdated --json > outdated.json || true
          cat outdated.json

      - name: Check for security vulnerabilities
        run: |
          npm audit --json > audit.json || true
          cat audit.json

      - name: Generate dependency report
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            let outdatedPackages = {};
            let vulnerabilities = {};
            
            try {
              outdatedPackages = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            } catch (e) {
              console.log('No outdated packages found');
            }
            
            try {
              const auditData = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
              vulnerabilities = auditData.vulnerabilities || {};
            } catch (e) {
              console.log('No vulnerabilities found');
            }
            
            const outdatedCount = Object.keys(outdatedPackages).length;
            const vulnCount = Object.keys(vulnerabilities).length;
            
            let report = `# ðŸ“¦ Weekly Dependency Report\n\n`;
            report += `**Generated:** ${new Date().toISOString().split('T')[0]}\n\n`;
            
            if (outdatedCount > 0) {
              report += `## ðŸ“Š Outdated Packages (${outdatedCount})\n\n`;
              for (const [pkg, info] of Object.entries(outdatedPackages)) {
                report += `- **${pkg}**: ${info.current} â†’ ${info.latest}\n`;
              }
              report += `\n`;
            } else {
              report += `## âœ… All packages are up to date!\n\n`;
            }
            
            if (vulnCount > 0) {
              report += `## ðŸš¨ Security Vulnerabilities (${vulnCount})\n\n`;
              for (const [pkg, vuln] of Object.entries(vulnerabilities)) {
                report += `- **${pkg}**: ${vuln.severity || 'unknown'} severity\n`;
              }
              report += `\n**Action Required:** Run \`npm audit fix\` to resolve vulnerabilities.\n\n`;
            } else {
              report += `## ðŸ”’ No security vulnerabilities found!\n\n`;
            }
            
            report += `---\n*This report is generated automatically every Monday. Check the Actions tab for more details.*`;
            
            // Create or update issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'automated'],
              state: 'open'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Weekly Dependency Report')
            );
            
            if (existingIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: report
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else if (outdatedCount > 0 || vulnCount > 0) {
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸ“¦ Weekly Dependency Report - ${new Date().toISOString().split('T')[0]}`,
                body: report,
                labels: ['dependencies', 'automated']
              });
              console.log(`Created new issue #${newIssue.number}`);
            }

  auto-merge-dependabot:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge minor updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: |
          gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
