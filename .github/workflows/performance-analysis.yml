name: Performance & Bundle Analysis

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'metro.config.js'
      - 'babel.config.js'

jobs:
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: pr/package-lock.json

      - name: Install dependencies (base)
        run: |
          cd base
          npm ci

      - name: Install dependencies (PR)
        run: |
          cd pr
          npm ci

      - name: Build base bundle
        run: |
          cd base
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android-base.bundle \
            --assets-dest /tmp/base-assets

      - name: Build PR bundle
        run: |
          cd pr
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android-pr.bundle \
            --assets-dest /tmp/pr-assets

      - name: Analyze bundle size
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            function getFileSize(filePath) {
              try {
                return fs.statSync(filePath).size;
              } catch (e) {
                return 0;
              }
            }
            
            function formatBytes(bytes) {
              if (bytes === 0) return '0 Bytes';
              const k = 1024;
              const sizes = ['Bytes', 'KB', 'MB', 'GB'];
              const i = Math.floor(Math.log(bytes) / Math.log(k));
              return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            const baseSize = getFileSize('base/android-base.bundle');
            const prSize = getFileSize('pr/android-pr.bundle');
            const sizeDiff = prSize - baseSize;
            const percentChange = baseSize > 0 ? ((sizeDiff / baseSize) * 100) : 0;
            
            let emoji = '📦';
            let status = 'No significant change';
            
            if (Math.abs(percentChange) > 10) {
              emoji = percentChange > 0 ? '📈' : '📉';
              status = percentChange > 0 ? 'Bundle size increased significantly' : 'Bundle size decreased significantly';
            } else if (Math.abs(percentChange) > 5) {
              emoji = percentChange > 0 ? '⚠️' : '✅';
              status = percentChange > 0 ? 'Bundle size increased moderately' : 'Bundle size decreased moderately';
            }
            
            const comment = `${emoji} **Bundle Size Analysis**
            
            | Metric | Base | PR | Diff |
            |--------|------|-----|------|
            | **Android Bundle** | ${formatBytes(baseSize)} | ${formatBytes(prSize)} | ${sizeDiff >= 0 ? '+' : ''}${formatBytes(Math.abs(sizeDiff))} (${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(2)}%) |
            
            **Status:** ${status}
            
            ${Math.abs(percentChange) > 10 ? '⚠️ **Warning**: Significant bundle size change detected. Please review:' : ''}
            ${Math.abs(percentChange) > 10 ? '- Are new dependencies necessary?\n- Can any existing dependencies be optimized?\n- Are there any large assets being added?' : ''}
            
            <details>
            <summary>📋 Analysis Details</summary>
            
            - Bundle analysis run on Android platform
            - Comparison between base branch (\`${github.context.payload.pull_request.base.ref}\`) and PR branch
            - Sizes include JavaScript bundle only (assets analyzed separately)
            
            </details>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Bundle Size Analysis')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  performance-checks:
    name: Performance Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance linting
        run: |
          # Check for common performance anti-patterns
          echo "🔍 Checking for performance anti-patterns..."
          
          # Check for console.log statements that should be removed
          if grep -r "console\.log" src/ --include="*.ts" --include="*.tsx" --exclude-dir=__tests__; then
            echo "⚠️ Found console.log statements that should be removed for production"
          fi
          
          # Check for missing React.memo usage in components
          echo "📊 Analyzing component optimization opportunities..."
          
          # Check for large inline styles (should use StyleSheet)
          if grep -r "style={{" src/ --include="*.tsx" | wc -l | awk '{if($1 > 5) print "⚠️ Found " $1 " inline styles - consider using StyleSheet.create()"}'; then
            :
          fi
          
          # Check for missing key props in lists
          if grep -rn "\.map(" src/ --include="*.tsx" | grep -v "key=" | head -5; then
            echo "⚠️ Found map operations without key props - this can impact performance"
          fi

      - name: Analyze import statements
        run: |
          echo "📦 Analyzing import patterns..."
          
          # Check for barrel exports that might impact bundle size
          if grep -r "import.*from.*index" src/ --include="*.ts" --include="*.tsx" | head -5; then
            echo "ℹ️ Found barrel imports - ensure they don't impact bundle size"
          fi
          
          # Check for unused imports (basic check)
          echo "🧹 Checking for potential unused imports..."
          npx tsc --noEmit --noUnusedLocals --noUnusedParameters || echo "ℹ️ TypeScript unused code check completed"

      - name: Generate performance report
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let report = `# 🚀 Performance Analysis Report\n\n`;
            
            // Count components and screens
            try {
              const componentCount = execSync("find src/components -name '*.tsx' | wc -l", { encoding: 'utf8' }).trim();
              const screenCount = execSync("find src/screens -name '*.tsx' | wc -l", { encoding: 'utf8' }).trim();
              const contextCount = execSync("find src/contexts -name '*.tsx' | wc -l", { encoding: 'utf8' }).trim();
              
              report += `## 📊 Project Statistics\n\n`;
              report += `- **Components**: ${componentCount}\n`;
              report += `- **Screens**: ${screenCount}\n`;
              report += `- **Contexts**: ${contextCount}\n\n`;
            } catch (e) {
              console.log('Could not gather project statistics');
            }
            
            report += `## 🔍 Performance Recommendations\n\n`;
            report += `Based on the React Native Investment Fund App architecture:\n\n`;
            report += `### Context Optimization\n`;
            report += `- ✅ Using context-first architecture without Redux\n`;
            report += `- 💡 Consider memoizing context values to prevent unnecessary re-renders\n`;
            report += `- 💡 Split large contexts if they grow too complex\n\n`;
            
            report += `### Navigation Performance\n`;
            report += `- ✅ Using custom state-based navigation (lighter than React Navigation)\n`;
            report += `- 💡 Consider lazy loading screens if the app grows\n\n`;
            
            report += `### Memory Management\n`;
            report += `- 💡 Ensure AsyncStorage operations are properly handled\n`;
            report += `- 💡 Monitor context state size, especially PortfolioContext\n`;
            report += `- 💡 Consider implementing data pagination for large fund lists\n\n`;
            
            report += `---\n*This analysis is based on the current PR changes and project structure.*`;
            
            console.log(report);
