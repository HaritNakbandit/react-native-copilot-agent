name: Auto Label PRs

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  label-pr:
    name: Auto Label Pull Request
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto label based on files changed
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const changedFiles = files.map(file => file.filename);
            const labels = [];

            // Determine labels based on file patterns
            const patterns = {
              'frontend': [/^src\/screens\//, /^src\/components\//, /\.tsx?$/],
              'backend': [/^src\/services\//, /^src\/utils\//, /StorageService/],
              'testing': [/^__tests__\//, /\.test\./],
              'documentation': [/\.md$/, /^docs\//],
              'ci/cd': [/^\.github\//, /\.yml$/, /\.yaml$/],
              'dependencies': [/package\.json$/, /package-lock\.json$/, /Podfile/, /build\.gradle/],
              'authentication': [/auth/i, /login/i, /register/i],
              'portfolio': [/portfolio/i, /investment/i, /fund/i],
              'navigation': [/navigator/i, /navigation/i],
              'context': [/context/i, /provider/i],
              'android': [/^android\//, /\.gradle$/, /AndroidManifest/],
              'ios': [/^ios\//, /\.xcodeproj/, /Podfile/, /\.plist$/],
              'config': [/config/i, /\.config\./, /babel\./, /metro\./, /tsconfig/],
              'assets': [/^assets\//, /\.(png|jpg|jpeg|gif|svg|ttf|otf)$/],
              'styles': [/style/i, /theme/i, /color/i]
            };

            for (const [label, regexes] of Object.entries(patterns)) {
              if (regexes.some(regex => changedFiles.some(file => regex.test(file)))) {
                labels.push(label);
              }
            }

            // Determine size label
            const additions = pr.additions;
            const deletions = pr.deletions;
            const totalChanges = additions + deletions;

            if (totalChanges > 1000) {
              labels.push('size/XL');
            } else if (totalChanges > 500) {
              labels.push('size/L');
            } else if (totalChanges > 100) {
              labels.push('size/M');
            } else {
              labels.push('size/S');
            }

            // Determine priority based on title and description
            const title = pr.title.toLowerCase();
            const body = (pr.body || '').toLowerCase();
            const text = `${title} ${body}`;

            if (text.includes('urgent') || text.includes('hotfix') || text.includes('critical')) {
              labels.push('priority/high');
            } else if (text.includes('bug') || text.includes('fix')) {
              labels.push('priority/medium');
              labels.push('type/bugfix');
            } else if (text.includes('feature') || text.includes('enhancement')) {
              labels.push('type/feature');
            } else if (text.includes('refactor') || text.includes('cleanup')) {
              labels.push('type/refactor');
            }

            // Investment app specific labels
            if (text.includes('fund') || text.includes('mutual fund') || text.includes('investment')) {
              labels.push('domain/funds');
            }
            if (text.includes('portfolio') || text.includes('dashboard')) {
              labels.push('domain/portfolio');
            }
            if (text.includes('user') || text.includes('profile') || text.includes('settings')) {
              labels.push('domain/user');
            }
            if (text.includes('transaction') || text.includes('payment')) {
              labels.push('domain/transactions');
            }
            if (text.includes('chart') || text.includes('graph') || text.includes('visualization')) {
              labels.push('domain/analytics');
            }

            // Check if this is a breaking change
            if (text.includes('breaking') || text.includes('breaking change')) {
              labels.push('breaking-change');
            }

            // Performance related
            if (text.includes('performance') || text.includes('optimization') || text.includes('speed')) {
              labels.push('performance');
            }

            // Security related
            if (text.includes('security') || text.includes('vulnerability') || text.includes('auth')) {
              labels.push('security');
            }

            // Remove duplicates and apply labels
            const uniqueLabels = [...new Set(labels)];

            if (uniqueLabels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: uniqueLabels
              });

              console.log(`Applied labels: ${uniqueLabels.join(', ')}`);
            }

      - name: Check PR template compliance
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const body = pr.body || '';
            const requiredSections = [
              'description',
              'changes',
              'testing',
              'checklist'
            ];

            const missingSections = requiredSections.filter(section => 
              !body.toLowerCase().includes(section)
            );

            if (missingSections.length > 0) {
              const comment = `## üìã PR Template Compliance
              
This PR is missing some recommended sections:
${missingSections.map(section => `- [ ] ${section.charAt(0).toUpperCase() + section.slice(1)}`).join('\n')}

Consider adding these sections to improve the PR description and make review easier.

<details>
<summary>üìù Recommended PR Template</summary>

\`\`\`markdown
## Description
Brief description of the changes

## Changes Made
- List of specific changes
- Include any breaking changes

## Testing
- [ ] Unit tests pass
- [ ] Manual testing completed
- [ ] Tested on iOS/Android

## Checklist
- [ ] Code follows project conventions
- [ ] Self-review completed
- [ ] Documentation updated if needed
- [ ] No console.log statements left
\`\`\`

</details>`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
